{
    "input_path": "/input_path/to/hackernews",
    "input_ext": "jsonl",
    "input_text_key": "text",
    "output_path": "/output_path/to/hackernews",
    "output_source_value": "hackernews",
    "if_filter": true,
    "filter_paras": {
        "fil_my_rules": {
            "comments": "To make ZHEM more flexible, we have added a new filtering interface that allows users to add custom filter rules to 'utils/utils/my_rules.py'.",
            "use": false,
            "rules": [

            ]
        },
        "fil_dirty_words": {
            "comments": "Remove the text if the words in 'words' appear in the text.", 
            "use": false,
            "words": [
                
            ]
        },
        "fil_langs": {
            "use": false,
            "accept_lang_list": ["en", "zh"]
        },
        "fil_ppl": {
            "use": true,
            "param": 3
        },
        "fil_lang_score": {
            "use": false,
            "reject_threshold": 0.5
        },
        "fil_short_texts": {
            "use" : true,
            "param": 170
        },
        "fil_non_ch": {
            "use": false,
            "param": 0.4
        },
        "fil_alphanum": {
            "use": false,
            "lower_bound": 0.0,
            "upper_bound": 1.0
        },
        "fil_copyright": {
            "use": false,
            "ch_list":[
            ],
            "en_list": [
            ]
        },
        "fil_short_lines": {
            "use": false,
            "param": 0.25,
            "lower_bound": 3
        }
    },
    "if_clean": true,
    "clean_paras": {
        "extractor": {
            "use": false,
            "mode": {"html": false, "mobi": false, "epub": false},
            "keep_newline_labels": [
                
            ]
        },
        "my_funcs": {
            "comments": "To make ZHEM more flexible, we have added a new cleaning interface that allows users to add custom cleaning functions to 'utils/utils/my_funcs.py'.",
            "use": false,
            "funcs": [
                "RemoveLineBreaks"
            ]
        },
        "rm_crawlerchars": {
            "use": false
        },
        "sub_newline": {
            "use": false
        },
        "rm_re_rules": {
            "comments": "remove text fragments matching any of regular expressions in `re_list`",
            "use": true,
            "re_list": [
                "===+",
                "~~~+",
                "\\-\\-\\-+",
                "\\\\-+ ",
                "I&#x[0-9A-F]+"
                
            ]
        },
        "sub_re_rules": {
            "comments": "substitute(replace) text fragments by any <key, value> pair of `re_dict`, key is an regular expression, value is an plain text",
            "use": true,
            "re_dict": {
                "\\n>": "\\n",
                "\\n_": "\\n",
                "_\\n": "\\n",
                " _": " ",
                "_ ": " ",
                "<p>": " ",
                "\\n ": "\\n"
            }
        },
        "rm_str_rules": {
            "comments": "remove text fragments matching any of strings in `str_list`",
            "use": true,
            "str_list": [
                "\\.",
                "\\\\+ ",
                "&#x2F;"
            ]
        },
        "rm_re_lines": {
            "comments": "remove **a line** if any text fragments in this line matching any of **regular expressions** in `re_list`",
            "use": true,
            "re_list": [
                "\\[[0-9]+\\][ :]",
                " \\[[0-9]+\\]",
                "\\[[0-9]+\\]:? \\[http"
            ]
        },
        "rm_str_lines": {
            "comments": "remove **a line** if any text fragments in this line matching any of **string** in `str_list`",
            "use": false,
            "str_list": [

            ]
        },
        "rm_str_seg": {
            "comments": "remove **a segment** after matching any of **string** in `str_list` if any text fragments in this text are matched",
            "use": false,
            "str_list": [
            ]
        },
        "rm_re_seg": {
            "comments": "remove **a segment** after matching any of **string** in `re_list` if any text fragments in this text are matched",
            "use": false,
            "re_list": [
            ]
        },
        "tra2sim": {
            "use": false,
            "target": "zh-cn"
        }
    },
    "if_dedup": false,
    "dedup_paras": {
        "language": "zh",
        "ngram": 5,
        "num_perm": 128,
        "min_length": 20,
        "threshold": 0.7
    },
    "if_parallel": false,
    "parallel_paras": {
        "comments": "it means if the input data is already cut into pieces",
        "if_cut": false,
        "cut_tmpfiles_path": "",
        "n_process": 10,
        "chunk_size": -1
    },
    "if_debug": false,
    "debug_paras": {
        "debug_report_path": "debug_report/debug_report.json",
        "debug_cases_num": 5,
        "if_sample": true,
        "debug_sample_num_per_file": 100000,  
        "debug_find_cases": {
            "use" : false,
            "words": [
                
            ]
        },
        "debug_short_texts": {
            "length": 200,
            "if_fix_fil_ratio": false,
            "exp_fil_ratio": 0.05
        },
        "debug_non_ch": {
            "use": false,
            "if_fix_fil_ratio": false,
            "exp_fil_ratio": 0.05
        },
        "debug_short_lines": {
            "use": false,
            "if_fix_fil_ratio": false,
            "exp_fil_ratio": 0.05
        },
        "debug_ppl": {
            "use": false
        }
    }
}